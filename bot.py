from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3
import logging

API_TOKEN = '7111326832:AAH2M8UHYK1X2Mh_V_vwnO59vAx23ird6-U'
ADMIN_ID = 7139336638  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect('guarant_bot.db')
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 0,
    referrer_id INTEGER DEFAULT NULL
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS history (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    action TEXT,
    amount INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)
""")
conn.commit()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class WithdrawState(StatesGroup):
    waiting_for_wallet = State()
    waiting_for_amount = State()

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        ref_id = message.get_args()
        cursor.execute("INSERT INTO users (id, username, referrer_id) VALUES (?, ?, ?)", 
                       (user_id, username, ref_id if ref_id.isdigit() else None))
        conn.commit()

    kb = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton("üí∏ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"),
        InlineKeyboardButton("üìú –°–¥–µ–ª–∫–∏", callback_data="history"),
        InlineKeyboardButton("üì§ –í—ã–≤–æ–¥", callback_data="withdraw")
    )
    if user_id == ADMIN_ID:
        kb.add(InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–∞—Ä–∞–Ω—Ç-–ë–æ—Ç–∞!", reply_markup=kb)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query_handler(lambda c: c.data == "profile")
async def profile_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
    result = cursor.fetchone()

    if result is None:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    balance = result[0] if result[0] is not None else 0

    await callback.message.edit_text(
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nID: {user_id}\n–ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ"
    )


@dp.callback_query_handler(lambda c: c.data == "balance")
async def balance_handler(callback: types.CallbackQuery):
    await callback.message.edit_text("üí∏ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞. –í –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.")

@dp.callback_query_handler(lambda c: c.data == "referrals")
async def referral_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT COUNT(*) FROM users WHERE referrer_id = ?", (user_id,))
    count = cursor.fetchone()[0]
    await callback.message.edit_text(f"üë• –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
t.me/artalGARANT_bot?start={user_id}")

@dp.callback_query_handler(lambda c: c.data == "history")
async def history_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT action, amount, timestamp FROM history WHERE user_id = ? ORDER BY id DESC LIMIT 5", (user_id,))
    rows = cursor.fetchall()
    if not rows:
        text = "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞."
    else:
        text = "\n".join([f"{a} –Ω–∞ {amt}‚ÇΩ ‚Äî {t}" for a, amt, t in rows])
    await callback.message.edit_text(f"üìú –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫:
{text}")

# --- –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ ---
@dp.callback_query_handler(lambda c: c.data == "withdraw")
async def withdraw_start(callback: types.CallbackQuery):
    await WithdrawState.waiting_for_wallet.set()
    await callback.message.edit_text("üì§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ—à–µ–ª—ë–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞:")

@dp.message_handler(state=WithdrawState.waiting_for_wallet)
async def withdraw_wallet(message: types.Message, state: FSMContext):
    await state.update_data(wallet=message.text)
    await WithdrawState.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")

@dp.message_handler(state=WithdrawState.waiting_for_amount)
async def withdraw_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        user_id = message.from_user.id
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        balance = cursor.fetchone()[0]
        if amount > balance:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        else:
            cursor.execute("UPDATE users SET balance = balance - ? WHERE id = ?", (amount, user_id))
            cursor.execute("INSERT INTO history (user_id, action, amount) VALUES (?, ?, ?)", (user_id, "–í—ã–≤–æ–¥", amount))
            conn.commit()
            await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    await state.finish()

# --- –ê–¥–º–∏–Ω–∫–∞ ---
@dp.callback_query_handler(lambda c: c.data == "admin")
async def admin_panel(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
    await callback.message.edit_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: /addbalance user_id —Å—É–º–º–∞")

@dp.message_handler(Command("addbalance"))
async def admin_add_balance(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, uid, amt = message.text.split()
        cursor.execute("UPDATE users SET balance = balance + ? WHERE id = ?", (int(amt), int(uid)))
        cursor.execute("INSERT INTO history (user_id, action, amount) VALUES (?, ?, ?)", (int(uid), "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", int(amt)))
        conn.commit()
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amt}‚ÇΩ.")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /addbalance user_id —Å—É–º–º–∞")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
